pip install flask flask-sqlalchemy flask-login


from flask import Flask, render_template, request, redirect, url_for, flash, session
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user 

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///quiz.db'
app.config['SECRET_KEY'] = 'your_secret_key'
db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# Models
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)

class Quiz(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(150), nullable=False)
    description = db.Column(db.Text, nullable=False)

class Question(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    quiz_id = db.Column(db.Integer, db.ForeignKey('quiz.id'), nullable=False)
    text = db.Column(db.Text, nullable=False)
    options = db.Column(db.PickleType, nullable=False)  # Stores options as a list
    correct_answer = db.Column(db.String(150), nullable=False)

class Result(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    quiz_id = db.Column(db.Integer, db.ForeignKey('quiz.id'), nullable=False)
    score = db.Column(db.Integer, nullable=False)

# Authentication
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username, password=password).first()
        if user:
            login_user(user)
            return redirect(url_for('dashboard'))
        else:
            flash('Invalid credentials')
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# Quiz Management (Admin)
@app.route('/admin/quiz', methods=['GET', 'POST'])
@login_required
def manage_quizzes():
    if not current_user.is_admin:
        return redirect(url_for('dashboard'))
    if request.method == 'POST':
        title = request.form['title']
        description = request.form['description']
        new_quiz = Quiz(title=title, description=description)
        db.session.add(new_quiz)
        db.session.commit()
        flash('Quiz created successfully!')
    quizzes = Quiz.query.all()
    return render_template('admin_quiz.html', quizzes=quizzes)

@app.route('/admin/quiz/<int:quiz_id>/questions', methods=['GET', 'POST'])
@login_required
def manage_questions(quiz_id):
    if not current_user.is_admin:
        return redirect(url_for('dashboard'))
    if request.method == 'POST':
        text = request.form['text']
        options = request.form.getlist('options')
        correct_answer = request.form['correct_answer']
        question = Question(quiz_id=quiz_id, text=text, options=options, correct_answer=correct_answer)
        db.session.add(question)
        db.session.commit()
        flash('Question added successfully!')
    questions = Question.query.filter_by(quiz_id=quiz_id).all()
    return render_template('admin_questions.html', questions=questions, quiz_id=quiz_id)

# Taking Quizzes
@app.route('/quiz/<int:quiz_id>', methods=['GET', 'POST'])
@login_required
def take_quiz(quiz_id):
    quiz = Quiz.query.get_or_404(quiz_id)
    questions = Question.query.filter_by(quiz_id=quiz_id).all()
    if request.method == 'POST':
        score = 0
        for question in questions:
            user_answer = request.form.get(str(question.id))
            if user_answer == question.correct_answer:
                score += 1
        result = Result(user_id=current_user.id, quiz_id=quiz_id, score=score)
        db.session.add(result)
        db.session.commit()
        flash(f'You scored {score}/{len(questions)}!')
        return redirect(url_for('dashboard'))
    return render_template('take_quiz.html', quiz=quiz, questions=questions)

# Dashboard
@app.route('/dashboard')
@login_required
def dashboard():
    quizzes = Quiz.query.all()
    return render_template('dashboard.html', quizzes=quizzes)

if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)



#front end
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h1>Login</h1>
    <form method="POST">
        <input type="text" name="username" placeholder="Username" required>
        <input type="password" name="password" placeholder="Password" required>
        <button type="submit">Login</button>
    </form>
</body>
</html>


#html
<!DOCTYPE html>
<html>
<head>
    <title>Dashboard</title>
</head>
<body>
    <h1>Welcome, {{ current_user.username }}</h1>
    <h2>Available Quizzes</h2>
    <ul>
        {% for quiz in quizzes %}
        <li><a href="{{ url_for('take_quiz', quiz_id=quiz.id) }}">{{ quiz.title }}</a></li>
        {% endfor %}
    </ul>
    <a href="/logout">Logout</a>
</body>
</html>


